since the duplication still happens after clearing HTML, the issue likely stems from how and when your data-injection/render function is being called.

ðŸ§  Problem Root: Repeated Re-rendering Without Resetting State
Every time you reopen the preview:

Your data-rendering code runs again

But it might target the wrong container or not clear dynamic containers correctly

Or your code appends new HTML but does not remove old listeners or fragments before re-rendering

âœ… Step-by-Step Fix Strategy
1. Double-check HTML clearing
Ensure the exact container you're injecting into is being cleared.

Example:

javascript
Copy
Edit
// This MUST match the container in your HTML
const container = document.querySelector('.work-experience');

// If container is null or undefined, it wonâ€™t clear anything
if (container) {
  container.innerHTML = '';  // Always clear before re-rendering
}
âœ… Test: Add a console.log('Rendering...') at the start of your render function and see how many times it logs.

2. Prevent repeated injection with a simple check
If the DOM already has content, skip appending again:

javascript
Copy
Edit
if (!container.dataset.rendered) {
  renderWorkExperience(data);
  container.dataset.rendered = 'true'; // flag to avoid re-render
}
You can reset this flag if needed when closing the preview.

3. Verify where your function is being called
If your render() is inside an event listener or observer, make sure you donâ€™t bind it multiple times:

ðŸš« Bad:

javascript
Copy
Edit
document.querySelector('#preview-btn').addEventListener('click', () => {
  renderWorkExperience(data); // this gets bound every time you load
});
âœ… Good:

javascript
Copy
Edit
function setupPreviewButton() {
  const btn = document.querySelector('#preview-btn');
  btn.removeEventListener('click', render); // remove first
  btn.addEventListener('click', render);    // add again
}
4. If using frameworks or AJAX:
If your preview pane is reloaded from the server or a framework:

Make sure the injected HTML isnâ€™t already containing old data

Add a .replaceChildren() call instead of .innerHTML = '':

javascript
Copy
Edit
container.replaceChildren(); // newer, safer
âœ… Summary of Fixes:
Clear the exact matching DOM container

Add a data-rendered check to prevent stacking

Make sure event listeners aren't rebinding multiple times

Use console.log to trace function calls

